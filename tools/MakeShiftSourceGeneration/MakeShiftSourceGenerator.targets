<Project InitialTargets="GenerateHttpConstructor">
  <UsingTask TaskName="HttpConstructorGenerator" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)/Microsoft.Build.Tasks.Core.dll">
    <Task>
      <Reference Include="$(ProjectRoot)/tools/MakeShiftSourceGeneration/libs/System.Memory.dll" />
      <Reference Include="$(ProjectRoot)/tools/MakeShiftSourceGeneration/libs/System.Text.Json.dll" />
      <Reference Include="$(ProjectRoot)/tools/MakeShiftSourceGeneration/libs/NuGet.Frameworks.dll" />
      <Using Namespace="System" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Linq" />
      <Using Namespace="System.Reflection" />
      <Using Namespace="System.Text" />
      <Using Namespace="System.Text.Json" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Using Namespace="NuGet.Frameworks" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            #nullable enable
            const string codeTemplate =
"""
// <auto-generated/>

#nullable enable
namespace HyperSharp.Protocol
{
    public readonly partial record struct HyperStatus
    {
        /// <inheritdoc cref="global::System.Net.HttpStatusCode.{{Code}}" />
        public static HyperStatus {{Code}}() => new(global::System.Net.HttpStatusCode.{{Code}}, new HyperHeaderCollection(), null);

        /// <inheritdoc cref="global::System.Net.HttpStatusCode.{{Code}}" />
        /// <param name="body">The body of the response.</param>
        public static HyperStatus {{Code}}(object? body) => new(global::System.Net.HttpStatusCode.{{Code}}, new HyperHeaderCollection(), body);

        /// <inheritdoc cref="global::System.Net.HttpStatusCode.{{Code}}" />
        /// <param name="headers">The headers of the response.</param>
        public static HyperStatus {{Code}}(HyperHeaderCollection headers) => new(global::System.Net.HttpStatusCode.{{Code}}, headers, null);

        /// <inheritdoc cref="global::System.Net.HttpStatusCode.{{Code}}" />
        /// <param name="headers">The headers of the response.</param>
        /// <param name="body">The body of the response.</param>
        public static HyperStatus {{Code}}(HyperHeaderCollection headers, object? body) => new(global::System.Net.HttpStatusCode.{{Code}}, headers, body);
    }
}

""";
            string[] targetedFrameworks = "$(TargetFrameworks)".Split(';');

            string? dotnetRoot = Environment.GetEnvironmentVariable("DOTNET_ROOT");
            if (dotnetRoot is null)
            {
                Log.LogError("DOTNET_ROOT is not set.");
                return false;
            }

            Dictionary<NuGetFramework, string> nuGetFrameworks = new();
            foreach (string sdkVersion in Directory.GetDirectories(Path.Combine(dotnetRoot, "shared/Microsoft.NETCore.App/")))
            {
                string msBuildDependenciesJsonPath = Path.Combine(sdkVersion, "Microsoft.NETCore.App.runtimeconfig.json");
                if (!File.Exists(msBuildDependenciesJsonPath))
                {
                    continue;
                }

                JsonDocument? jsonDocument = JsonDocument.Parse(File.ReadAllText(msBuildDependenciesJsonPath));
                if (jsonDocument is null)
                {
                    continue;
                }

                // runtimeOptions.tfm
                if (!jsonDocument.RootElement.TryGetProperty("runtimeOptions", out JsonElement runtimeOptions) || !runtimeOptions.TryGetProperty("tfm", out JsonElement tfm))
                {
                    continue;
                }

                string? targetFrameworkMoniker = tfm.GetString();
                if (targetFrameworkMoniker is null)
                {
                    continue;
                }
                else if (!targetedFrameworks.Any(framework => framework.StartsWith(targetFrameworkMoniker, StringComparison.OrdinalIgnoreCase)))
                {
                    continue;
                }

                nuGetFrameworks.Add(NuGetFramework.Parse(targetFrameworkMoniker), Path.GetDirectoryName(msBuildDependenciesJsonPath)!);
            }

            FrameworkReducer frameworkReducer = new();
            NuGetFramework selectedFramework = frameworkReducer.ReduceDownwards(nuGetFrameworks.Keys).First();

            Assembly assembly = Assembly.LoadFile(Path.Combine(nuGetFrameworks[selectedFramework], "System.Net.Primitives.dll"));
            string[] httpStatuses = Enum.GetNames(assembly.GetType("System.Net.HttpStatusCode")!);
            foreach (string httpStatus in httpStatuses)
            {
                StringBuilder stringBuilder = new(codeTemplate);
                stringBuilder.Replace("{{Code}}", httpStatus);
                File.WriteAllText($"$(ProjectRoot)/src/HyperSharp/Protocol/HyperStatus/HyperStatus.{httpStatus}.g.cs", stringBuilder.ToString());
            }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="GenerateHttpConstructor" BeforeTargets="CoreCompile" Condition="!Exists('$(ProjectRoot)/src/HyperSharp/Protocol/HyperStatus/HyperStatus.OK.g.cs')" >
    <HttpConstructorGenerator />
  </Target>
</Project>